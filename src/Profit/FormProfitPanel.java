/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Profit;

import com.formdev.flatlaf.FlatClientProperties;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Koneksi.Koneksi;
import java.awt.Color;
import java.awt.print.PrinterException;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JTable;

/**
 *
 * @author Diaz Nuraji
 */
public class FormProfitPanel extends javax.swing.JPanel {

    private static Connection cn;
    private static ResultSet rs;
    private static Statement st;
    private static PreparedStatement pst;
    

    /**
     * Creates new form FormEventPanel
     */
    public FormProfitPanel() {
        initComponents();
        UpdateTable();
        transparan();
        pnEvent.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:12;" // Sudut
                + "background:$Login.background");
//        lbTitleEvent.putClientProperty(FlatClientProperties.STYLE, ""
//                + "font:+bold +20");
    }
    public void transparan(){
        btnPrint.setBackground(new Color(0,0,0,0));
        
    }

    public void UpdateTable() {
        DefaultTableModel tbl = new DefaultTableModel();
        tbl.addColumn("Month");
        tbl.addColumn("Total Penjualan");
        tbl.addColumn("Total Pengeluaran");
        tbl.addColumn("Keuntungan");
        Table.setModel(tbl);

        try {
            cn = Koneksi.koneksiDB();
            st = cn.createStatement();

            // Query to calculate monthly profitability
            String query = "SELECT "
                    + "   DATE_FORMAT(tanggal, '%Y-%m') AS month, "
                    + "   SUM(CASE WHEN table_name = 'detail_transaksi' THEN total ELSE 0 END) AS total_sales, "
                    + "   SUM(CASE WHEN table_name = 'barang_masuk' THEN total ELSE 0 END) AS total_costs, "
                    + "   SUM(CASE WHEN table_name = 'detail_transaksi' THEN total ELSE 0 END) - "
                    + "   SUM(CASE WHEN table_name = 'barang_masuk' THEN total ELSE 0 END) AS profitability "
                    + "FROM ( "
                    + "   SELECT 'detail_transaksi' AS table_name, tanggal, total FROM detail_transaksi "
                    + "   UNION ALL "
                    + "   SELECT 'barang_masuk' AS table_name, tanggal, total FROM barang_masuk "
                    + ") AS combined "
                    + "GROUP BY month "
                    + "ORDER BY month;";

            rs = st.executeQuery(query);

            while (rs.next()) {
                String monthYear = rs.getString("month");
                String monthName = getMonthName(monthYear);

                tbl.addRow(new Object[]{
                    monthName,
                    rs.getInt("total_sales"),
                    rs.getInt("total_costs"),
                    rs.getInt("profitability")
                });
                Table.setModel(tbl);
            }

            int totalProfitability = 0;
            for (int i = 0; i < Table.getRowCount(); i++) {
                // Calculate total profitability
                totalProfitability += (int) Table.getValueAt(i, 3);
            }

            // Add the sum of profitability below the table
            tbl.addRow(new Object[]{"Total", "", "", totalProfitability});
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Gagal memuat data: " + e.getMessage());
        }
    }

    private String getMonthName(String monthYear) {
        String[] parts = monthYear.split("-");
        int year = Integer.parseInt(parts[0]);
        int month = Integer.parseInt(parts[1]);
        String monthName = new DateFormatSymbols(Locale.getDefault()).getMonths()[month - 1];
        return monthName + " " + year;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnEvent = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnPrint = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(215, 223, 235));

        pnEvent.setBackground(new java.awt.Color(215, 223, 235));
        pnEvent.setInheritsPopupMenu(true);
        pnEvent.setPreferredSize(new java.awt.Dimension(960, 600));
        pnEvent.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        pnEvent.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 87, 840, 400));

        btnPrint.setBorder(null);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        pnEvent.add(btnPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 510, 90, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONTA/PROFIT.png"))); // NOI18N
        pnEvent.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 960, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
//        int row = Table.getSelectedRow();
//        String id_pegawai = Table.getValueAt(row, 0).toString();
//        String password = null;
//        String nama = null;
//        String jabatan = null;
//        String gaji = null;
//        try {
//            cn = Koneksi.koneksiDB();
//            pst = cn.prepareStatement("SELECT * FROM pegawai WHERE id_pegawai = ?");
//            pst.setString(1, id_pegawai);
//            rs = pst.executeQuery();
//            rs.next(); // Move cursor to first row
//            password = rs.getString("password");
//            nama = rs.getString("nama");
//            jabatan = rs.getString("jabatan");
//            gaji = rs.getString("gaji");
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(null, "Gagal memuat data: " + e.getMessage());
//        }
    }//GEN-LAST:event_TableMouseClicked


    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        try {
            // Get the current date
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            String printedDate = dateFormat.format(date);

            // Create the header and footer for printing
            MessageFormat header = new MessageFormat("Laporan Keuntungan: " + printedDate);
            MessageFormat footer = new MessageFormat("Page {0}");

            // Print the table with the document title and footer
            boolean printed = Table.print(JTable.PrintMode.FIT_WIDTH, header, footer, true, null, true, null);
            if (printed) {
                JOptionPane.showMessageDialog(null, "Print successful!");
            } else {
                JOptionPane.showMessageDialog(null, "Print canceled.");
            }
        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(null, "Failed to print: " + e.getMessage());
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton btnPrint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnEvent;
    // End of variables declaration//GEN-END:variables
}
